// * 1.0 Итак, что мы здесь видим: создаётся некий корневой компонент (далее - комп.) App, в который будут помещаться другие комп. Здесь для data мы использовали стрелочную функцию (далее - стрелка), чтобы сократить код, но не везде так можно делать. Например хуки жизненного цикла их нельзя делать через стрелку, потому, что далее может потребоваться контекст этого компонента. Или если мы в каком-то компоненте будем ориентироваться на пропсы (входные параметры для комп.), то нам также стрелка не подойдёт, т.к. будет важен контекст вызова. Однако здесь нет никакой работы с контекстом, поэтому здесь оправдано такое сокращение кода, а обернув {} в () получается, что мы просто возвращаем объект без слова return, иначе JS подумал бы, что мы возвращаем результат какой-то функции.
const app = Vue.createApp({
	/* 	data() {
			return {
				name: ''
			}
		} */
	data: () => ({
		name: ''
	}),
	// * 2.0 Т.к. написание кода в шаблоне может сильно разрастаться, а также, чтобы не повторять код, следует использовать методы и подставлять их.
	// 2.1 Сюда также следует дописать "this", чтобы не потерять контекст. Сказать, что мы именно у текущего компонента хотим поменять значение "name"
	methods: {
		onInput(evt) {
			this.name = evt.target.value
		}
	}
})

// 1.1 После того, как мы сформировали комп. мы говорим ему контролировать элемент в разметке с классом "sample". При таком подходе система видит, что нет ключа "template" берёт innerHTML div’а с классом "sample". И на основе этого шаблона, по описанным в комп. данным рендерит его на страницу. 
const root = app.mount('.sample')
console.log(root);
