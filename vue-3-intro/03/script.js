const { createApp } = Vue

/* //* 1.0 Описание структуры компонента. Итак, что такое эти:
	data - данные/массивы данных, которые использует данный компонент;
	methods - методы, которые использует компонент, чтобы осуществлять какой-то функционал;
	computed - вычисляемые свойства. Они очень похожи на методы, есть одно важное отличие, они кэшируются и обновляются только тогда, когда изменяется значение тех сущностей с которыми они связаны, что экономит ресурсы системы.
*/
// 1.1 Чтобы упорядочить template и лучше организовать rootComponent перенесём логику с кнопки в методы компонента.
// ? Есть одно правило нейминга, т.к. в итоге компонент собирает в себя все сущности из всех трёх разделов, то мы не можем называть их одинаково, чтобы названия не перекрещивались, тоже касается и пропсов.
// ? Также стоит помнить, что в computed & methods контекст привязан к данному текущему компоненту.
// ? Почему же мы в template вызываем cleanName без "()", хотя вроде это тоже функция? Потому, что Vue использует getters.
/* Вспомним обычный JS и его классы. Представим какой-нибудь класс A, у которого есть метод, который мы вызываем по имени с (), а есть конструкция геттера с ключ. словом "get", который вызывается просто по названию геттера, будто это обычная переменная. Вот и здесь такой же принцип.
class A {
	a = 1;
	b() {...}
	get c() {...}
}
*/
// ? Итак, подводим итог урока: в data мы инициализируем какие-то значения стартовые, методами мы меняем эти значения (как правило, когда в системе происходят действия, инициируемые пользователем и мы их перехватываем, обрабатываем и за счёт них меняются наши данные), ну а при изменении данных меняют может быть computed при их наличии и шаблон перерендерится.
// Go to [vue-3-intro\03\script-composition-api.js]
const rootComponent = {
	template: `
		<input type="text" v-model="name">
		<button type="button" @click="cleanName" :disabled="!nameFilled">X</button>
		<div v-if="nameFilled">
			<h2>Hello, {{ name }}!</h2>
		</div>
		<div v-else>
			<h2>Введите что-нибудь в строку ввода</h2>
		</div>
	`,
	data() {
		return {
			name: 'world'
		}
	},
	// 1.3 В вычисляемые поля будет логично перенести логику для блокировки кнопки или условия показа приветствия.
	computed: {
		nameFilled() {
			return this.name.length > 0
		}
	},
	// 1.2 Создадим новый метод, который будет очищать содержимое "name" и теперь применим его в v-on:click в template.
	methods: {
		cleanName() {
			this.name = ''
		}
	}
}

const app = createApp(rootComponent)

app.mount('.app');