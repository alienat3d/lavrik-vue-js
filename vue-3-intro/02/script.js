const { createApp } = Vue

// * 1.0 Но как мы писали в первом уроке не слишком удобно потом читать код, удобнее было бы вынести наш шаблон в отдельное место, так мы и сделаем. Теперь тег .app в HTML нас больше не интересует, а описание компонента у нас в rootComponent.
// 1.1 При том, когда мы будем описывать более мелкие компоненты, которые будут помещаться внутрь этого корневого компонента, то они будут описываться точно также.
// ? Понятное дело, что так мы пока пишем для в качестве введения, потом мы будем использовать сборщики и Single File Components подход, где для каждого компонента будет свой Vue-файл.
/* * 2.0 А теперь рассмотрим основные директивы Vue, которые мы будем очень часто использовать:  
	v-model - это синтаксический сахар от двух директив "v-bind" & "v-on" заданных определённым образом.
	v-bind (:) - для динамического задания любого атрибута, т.е. теперь вместо строки значения атрибута у нас будет здесь уже кусочек JS-кода или константа с какой-то функцией.
	v-on (@) - обработчик событий во Vue (аналог "addEventListener" в Vanilla JS)
	v-if, v-else - условия (аналог условий if...else)
	v-show - показывает элемент по какому-то условию (отличается от "v-if" тем, что в вёрстке элементы присутствуют, но до выполнения условий директивы, у этого элемента стоит "display: none;")
	v-for - размножение какой-то логики при помощи цикла;
	...etc. 
*/
// ? Стоит также отметить, что здесь мы работаем скорее с узлами DOM, чем с атрибутами HTML, т.к. например кнопке мы именно устанавливаем булево значение и его меняем, в зависимости от того, есть ли у нас что-то в "name" или нет.
/* //? 2.1 Другими словами, мы могли бы перезаписать "v-model" следующим образом. Обратим на "$event", что по сути является аналогом объекта event в Vanilla JS при навешивании обработчика событий. Vue называет все системные переменные начиная с "$".
	<input type="text" v-bind:value="name" v-on:input="name = $event.target.value">
	
	На самом деле "v-model" чуточку хитрее устроена, у неё есть доп. модификаторы, нюансы обновления данных, но сейчас это пока лишняя информация.
*/
// 2.2 Чтобы рассмотреть директиву "v-show" давайте представим, что приветствие нам нужно выводить только тогда, когда инпут, где мы вводим имя у нас не пустой. Для этого напишем, что для показа этого элемента name.length должен быть больше 0.
{/* <div v-show="name.length > 0" >
	<h2>Hello, {{ name }}!</h2>
</div > */}
const rootComponent = {
	template: `
		<input type="text" v-model="name">
		<button type="button" @click="name = ''" :disabled="name.length === 0">X</button>
		<div v-if="name.length > 0">
			<h2>Hello, {{ name }}!</h2>
		</div>
		<div v-else>
			<h2>Введите что-нибудь в строку ввода</h2>
		</div>
	`,
	data() {
		return {
			name: 'world'
		}
	}
}

const app = createApp(rootComponent)

app.mount('.app');